var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Player = (function () {
    function Player(n) {
        this.name = "Yoyo";
        this.name = n;
        //console.log("Player::constructor...");
    }
    Player.prototype.attack = function () {
        return this.name.toUpperCase() + ", attacking...!";
    };
    Player.prototype.sayName = function () {
        console.log("My name is: %s", this.name);
    };
    return Player;
})();
var Gladiator = (function (_super) {
    __extends(Gladiator, _super);
    function Gladiator(n, w) {
        _super.call(this, n);
        this.weapon = "knife";
        this.playerClass = "gladiator";
        this.weapon = w;
    }
    Gladiator.prototype.attack = function () {
        var str = _super.prototype.attack.call(this);
        return str + ' He has a ' + this.weapon.toUpperCase() + '...!';
    };
    return Gladiator;
})(Player);
var Wizard = (function (_super) {
    __extends(Wizard, _super);
    function Wizard(n, w, t) {
        _super.call(this, n);
        this.weapon = "knife";
        this.tools = ["staff"];
        this.playerClass = "wizard";
        this.weapon = w;
        if (t.length > 0) {
            var a = this.tools;
            t.forEach(function (tool) {
                a.push(tool);
            });
            this.tools = a;
        }
    }
    Wizard.prototype.attack = function () {
        var str = _super.prototype.attack.call(this);
        str += ' He has a ' + this.weapon.toUpperCase();
        this.tools.forEach(function (t) {
            str += ' and a ' + t.toUpperCase();
        });
        str += '...!';
        return str;
    };
    return Wizard;
})(Player);

var Game = (function () {
    function Game(n, pl) {
        this.name = "Game";
        this.players = [];
        this.addPlayer = function (p) {
            this.players.push(p);
        };
        this.removePlayer = function (p) {
            this.players.forEach(function (pl, idx) {
                if (p.name.toUpperCase() === pl.name.toUpperCase()) {
                    this.players.splice(idx, 1);
                }
            });
        };
        this.sayName = function () {
            console.log("I'm the game %s...", this.name.toUpperCase());
        };
        this.listPlayers = function () {
            if (this.players.length > 0) {
                console.log("%s has these players...", this.name);
                this.players.forEach(function (p) {
                    console.log("  I'm player %s", p.name);
                });
            }
        };
        this.name = n;
        if (pl) {
            var a = [];
            pl.forEach(function (p) {
                a.push(p);
            });
            this.players = a;
        }
        //console.log("Game::constructor...");
    }
    return Game;
})();
