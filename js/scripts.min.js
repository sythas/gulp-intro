function appLoaded(){console.log("app.js loaded...")}function test(){this.t1="test1",this.t2="test1",this.printVar=function(){console.log("Test Module Properties: t1: %s, t2: %s",this.t1,this.t2)}}var ngApp=angular.module("app",[]);ngApp.controller("MainController",["$scope",function(a){var e=this;e.data1="angular data 1",e.data2="angular data 2",e.playerStatus="",e.visible=!0,e.hideData=function(){e.visible=!e.visible},e.game=new Game("MyDungeon"),e.p1=new Player("Tom"),e.p2=new Gladiator("Dick","sword"),e.p3=new Gladiator("Harry","spear"),e.p4=new Wizard("Gandalf","sword",["spellbook","crystal skull"]),e.game.addPlayer(p1),e.game.addPlayer(p2),e.game.addPlayer(p3),e.game.addPlayer(p4),e.addNewPlayer=function(a){e.game.removePlayer()},e.attackit=function(a){e.playerStatus=a.attack()}}]),appLoaded(),console.log("\nStandard JS stuff..."),t=new test,t.printVar();var p1=new Player("Tom"),p2=new Gladiator("Dick","sword"),p3=new Gladiator("Harry","spear"),p4=new Wizard("Gandalf","sword",["spellbook","crystal skull"]);console.log('\nThe "Game" class - create a game called "myMaze"...');var g=new Game("myMaze",[p1,p2,p3,p4]);console.log('\nThe "Player, Gladiator, and Wizard" classes - create a "Player", two "Gladiators", and a Wizard...'),describe("test",function(){it("should have t1 value",function(){expect((new test).t1).toEqual("test1")}),it("should have t2 value",function(){expect((new test).t2).toEqual("test1")}),it("should have printVar function",function(){expect((new test).printVar).toBeDefined()})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInRlc3QuanMiLCJ0ZXN0LnNwZWMuanMiXSwibmFtZXMiOlsiYXBwTG9hZGVkIiwiY29uc29sZSIsImxvZyIsInRlc3QiLCJ0aGlzIiwidDEiLCJ0MiIsInByaW50VmFyIiwibmdBcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIm1haW4iLCJkYXRhMSIsImRhdGEyIiwicGxheWVyU3RhdHVzIiwidmlzaWJsZSIsImhpZGVEYXRhIiwiZ2FtZSIsIkdhbWUiLCJwMSIsIlBsYXllciIsInAyIiwiR2xhZGlhdG9yIiwicDMiLCJwNCIsIldpemFyZCIsImFkZFBsYXllciIsImFkZE5ld1BsYXllciIsInBsIiwicmVtb3ZlUGxheWVyIiwiYXR0YWNraXQiLCJwIiwiYXR0YWNrIiwidCIsImciLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwidG9FcXVhbCIsInRvQmVEZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQSxRQUFBQSxhQUNBQyxRQUFBQyxJQUFBLG9CQ0RBLFFBQUFDLFFBR0FDLEtBQUFDLEdBQUEsUUFDQUQsS0FBQUUsR0FBQSxRQUVBRixLQUFBRyxTQUFBLFdBQ0FOLFFBQUFDLElBQUEseUNBQUFFLEtBQUFDLEdBQUFELEtBQUFFLEtESEEsR0FBQUUsT0FBQUMsUUFBQUMsT0FBQSxTQUVBRixPQUFBRyxXQUFBLGtCQUFBLFNBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBVCxJQUVBUyxHQUFBQyxNQUFBLGlCQUNBRCxFQUFBRSxNQUFBLGlCQUNBRixFQUFBRyxhQUFBLEdBQ0FILEVBQUFJLFNBQUEsRUFFQUosRUFBQUssU0FBQSxXQUNBTCxFQUFBSSxTQUFBSixFQUFBSSxTQUtBSixFQUFBTSxLQUFBLEdBQUFDLE1BQUEsYUFDQVAsRUFBQVEsR0FBQSxHQUFBQyxRQUFBLE9BQ0FULEVBQUFVLEdBQUEsR0FBQUMsV0FBQSxPQUFBLFNBQ0FYLEVBQUFZLEdBQUEsR0FBQUQsV0FBQSxRQUFBLFNBQ0FYLEVBQUFhLEdBQUEsR0FBQUMsUUFBQSxVQUFBLFNBQUEsWUFBQSxrQkFFQWQsRUFBQU0sS0FBQVMsVUFBQVAsSUFDQVIsRUFBQU0sS0FBQVMsVUFBQUwsSUFDQVYsRUFBQU0sS0FBQVMsVUFBQUgsSUFDQVosRUFBQU0sS0FBQVMsVUFBQUYsSUFFQWIsRUFBQWdCLGFBQUEsU0FBQUMsR0FDQWpCLEVBQUFNLEtBQUFZLGdCQUdBbEIsRUFBQW1CLFNBQUEsU0FBQUMsR0FDQXBCLEVBQUFHLGFBQUFpQixFQUFBQyxhQUlBbEMsWUFDQUMsUUFBQUMsSUFBQSwwQkFDQWlDLEVBQUEsR0FBQWhDLE1BQ0FnQyxFQUFBNUIsVUFFQSxJQUFBYyxJQUFBLEdBQUFDLFFBQUEsT0FDQUMsR0FBQSxHQUFBQyxXQUFBLE9BQUEsU0FDQUMsR0FBQSxHQUFBRCxXQUFBLFFBQUEsU0FDQUUsR0FBQSxHQUFBQyxRQUFBLFVBQUEsU0FBQSxZQUFBLGlCQUVBMUIsU0FBQUMsSUFBQSx3REFDQSxJQUFBa0MsR0FBQSxHQUFBaEIsTUFBQSxVQUFBQyxHQUFBRSxHQUFBRSxHQUFBQyxJQUNBekIsU0FBQUMsSUFBQSx3R0VwREFtQyxTQUFBLE9BQUEsV0FDQUMsR0FBQSx1QkFBQSxXQUNBQyxRQUFBLEdBQUFwQyxPQUFBRSxJQUFBbUMsUUFBQSxXQUdBRixHQUFBLHVCQUFBLFdBQ0FDLFFBQUEsR0FBQXBDLE9BQUFHLElBQUFrQyxRQUFBLFdBR0FGLEdBQUEsZ0NBQUEsV0FDQUMsUUFBQSxHQUFBcEMsT0FBQUksVUFBQWtDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYXBwTG9hZGVkKCkge1xyXG4gICAgY29uc29sZS5sb2coJ2FwcC5qcyBsb2FkZWQuLi4nKTtcclxufVxyXG5cclxudmFyIG5nQXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtdKTtcclxuXHJcbm5nQXBwLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgICB2YXIgbWFpbiA9IHRoaXM7XHJcbiAgICBcclxuICAgIG1haW4uZGF0YTEgPSBcImFuZ3VsYXIgZGF0YSAxXCI7XHJcbiAgICBtYWluLmRhdGEyID0gXCJhbmd1bGFyIGRhdGEgMlwiO1xyXG4gICAgbWFpbi5wbGF5ZXJTdGF0dXMgPSBcIlwiO1xyXG4gICAgbWFpbi52aXNpYmxlID0gdHJ1ZTtcclxuICAgIFxyXG4gICAgbWFpbi5oaWRlRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG1haW4udmlzaWJsZSA9ICFtYWluLnZpc2libGU7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgLy8tLSB0aGUgY2xhc3Mgc3R1ZmZcclxuICAgICAgICBcclxuICAgIG1haW4uZ2FtZSA9IG5ldyBHYW1lKCdNeUR1bmdlb24nKTtcclxuICAgIG1haW4ucDEgPSBuZXcgUGxheWVyKCdUb20nKTtcclxuICAgIG1haW4ucDIgPSBuZXcgR2xhZGlhdG9yKCdEaWNrJywnc3dvcmQnKTtcclxuICAgIG1haW4ucDMgPSBuZXcgR2xhZGlhdG9yKCdIYXJyeScsJ3NwZWFyJyk7XHJcbiAgICBtYWluLnA0ID0gbmV3IFdpemFyZChcIkdhbmRhbGZcIixcInN3b3JkXCIsW1wic3BlbGxib29rXCIsXCJjcnlzdGFsIHNrdWxsXCJdKTtcclxuXHJcbiAgICBtYWluLmdhbWUuYWRkUGxheWVyKHAxKTtcclxuICAgIG1haW4uZ2FtZS5hZGRQbGF5ZXIocDIpO1xyXG4gICAgbWFpbi5nYW1lLmFkZFBsYXllcihwMyk7XHJcbiAgICBtYWluLmdhbWUuYWRkUGxheWVyKHA0KTtcclxuICAgIFxyXG4gICAgbWFpbi5hZGROZXdQbGF5ZXIgPSBmdW5jdGlvbihwbCkge1xyXG4gICAgICAgIG1haW4uZ2FtZS5yZW1vdmVQbGF5ZXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgbWFpbi5hdHRhY2tpdCA9IGZ1bmN0aW9uKHApIHtcclxuICAgICAgICBtYWluLnBsYXllclN0YXR1cyA9IHAuYXR0YWNrKCk7XHJcbiAgICB9O1xyXG59KTtcclxuXHJcbmFwcExvYWRlZCgpO1xyXG5jb25zb2xlLmxvZyhcIlxcblN0YW5kYXJkIEpTIHN0dWZmLi4uXCIpO1xyXG50ID0gbmV3IHRlc3QoKTtcclxudC5wcmludFZhcigpO1xyXG5cclxudmFyIHAxID0gbmV3IFBsYXllcignVG9tJyk7XHJcbnZhciBwMiA9IG5ldyBHbGFkaWF0b3IoJ0RpY2snLCdzd29yZCcpO1xyXG52YXIgcDMgPSBuZXcgR2xhZGlhdG9yKCdIYXJyeScsJ3NwZWFyJyk7XHJcbnZhciBwNCA9IG5ldyBXaXphcmQoXCJHYW5kYWxmXCIsXCJzd29yZFwiLFtcInNwZWxsYm9va1wiLFwiY3J5c3RhbCBza3VsbFwiXSk7XHJcblxyXG5jb25zb2xlLmxvZyhcIlxcblRoZSBcXFwiR2FtZVxcXCIgY2xhc3MgLSBjcmVhdGUgYSBnYW1lIGNhbGxlZCBcXFwibXlNYXplXFxcIi4uLlwiKTtcclxudmFyIGcgPSBuZXcgR2FtZSgnbXlNYXplJyxbcDEsIHAyLCBwMywgcDRdKTtcclxuY29uc29sZS5sb2coXCJcXG5UaGUgXFxcIlBsYXllciwgR2xhZGlhdG9yLCBhbmQgV2l6YXJkXFxcIiBjbGFzc2VzIC0gY3JlYXRlIGEgXFxcIlBsYXllclxcXCIsIHR3byBcXFwiR2xhZGlhdG9yc1xcXCIsIGFuZCBhIFdpemFyZC4uLlwiKTsiLCJmdW5jdGlvbiB0ZXN0KCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgXHJcbiAgICB0aGlzLnQxID0gJ3Rlc3QxJztcclxuICAgIHRoaXMudDIgPSAndGVzdDEnO1xyXG4gICAgXHJcbiAgICB0aGlzLnByaW50VmFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1Rlc3QgTW9kdWxlIFByb3BlcnRpZXM6IHQxOiAlcywgdDI6ICVzJywgdGhpcy50MSwgdGhpcy50Mik7XHJcbiAgICB9O1xyXG59IiwiZGVzY3JpYmUoJ3Rlc3QnLCBmdW5jdGlvbigpe1xuICBpdCgnc2hvdWxkIGhhdmUgdDEgdmFsdWUnLCBmdW5jdGlvbigpe1xuICAgIGV4cGVjdChuZXcgdGVzdCgpLnQxKS50b0VxdWFsKCd0ZXN0MScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhdmUgdDIgdmFsdWUnLCBmdW5jdGlvbigpe1xuICAgIGV4cGVjdChuZXcgdGVzdCgpLnQyKS50b0VxdWFsKCd0ZXN0MScpO1xuICB9KTtcbiAgXG4gIGl0KCdzaG91bGQgaGF2ZSBwcmludFZhciBmdW5jdGlvbicsIGZ1bmN0aW9uKCl7XG4gICAgZXhwZWN0KG5ldyB0ZXN0KCkucHJpbnRWYXIpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9